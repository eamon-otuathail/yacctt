module univalence where

import prelude

ua (A B : U) (e : equiv A B) : Path U A B = <i> V i A B e
  -- <i> V i A B (equivToEquivInhProp A B e)

uabeta (A B : U) (e : equiv A B) (a : A) :
  Path B (coe 0->1 (ua A B e) a) (e.1 a) =
  <i> coe i->1 (<_> B) (e.1 a)

retract (A B : U) (f : A -> B) (g : B -> A) : U = (a : A) -> Path A (g (f a)) a

pathToEquiv (A B : U) (p : Path U A B) : equiv A B =
  coe 0->1 (<i> equiv A (p @ i)) (idEquiv A)
  -- Normal form (typechecks):
  -- (coe 0->1 (<i1240> A -> (p @ i1240)) (\(a : A) -> a),coe 0->1 (<i1240> (b : p @ i1240) -> Sigma (Sigma A (\(a : A) -> PathP (<i1242> p @ i1240) (coe 0->i1240 (<i1240> p @ i1240) (coe i1240->0 (<i1240> A) a)) b)) (\(x : Sigma A (\(a : A) -> PathP (<i1243> p @ i1240) (coe 0->i1240 (<i1240> p @ i1240) (coe i1240->0 (<i1240> A) a)) b)) -> (y : Sigma A (\(a : A) -> PathP (<i1244> p @ i1240) (coe 0->i1240 (<i1240> p @ i1240) (coe i1240->0 (<i1240> A) a)) b)) -> PathP (<i1245> Sigma A (\(a : A) -> PathP (<i1246> p @ i1240) (coe 0->i1240 (<i1240> p @ i1240) (coe i1240->0 (<i1240> A) a)) b)) y x)) (\(a : A) -> ((a,<i1254> a),\(f : Sigma A (\(a0 : A) -> PathP (<i1247> A) a0 a)) -> <i1248> (hcom 1->0 A [ (i1248 = 0) -> <i1252> f.2 @ i1252, (i1248 = 1) -> <i1252> a ] a,<i1249> hcom 1->i1249 A [ (i1248 = 0) -> <i1250> f.2 @ i1250, (i1248 = 1) -> <i1250> a ] a))))

-- normal form works
equivLemma (A B : U) : (v w : equiv A B) -> Path (A -> B) v.1 w.1 -> Path (equiv A B) v w =
  lemSig (A -> B) (isEquiv A B) (propIsEquivDirect A B)

uaret (A B : U) : retract (equiv A B) (Path U A B) (ua A B) (pathToEquiv A B) =
  \(e : equiv A B) ->
    equivLemma A B (pathToEquiv A B (ua A B e)) e (<i> \(a : A) -> uabeta A B e (coe 1->i (<_> A) a) @ i)

isContrPath (A : U) : isContr ((B : U) * Path U A B) =
  ((A,<_> A),\(bp : (B : U) * Path U A B) -> <i> (hcom 0->1 U [(i=0) -> bp.2,(i=1) -> <_> A ] A
                                                 ,<j> hcom 0->j U [(i=0) -> bp.2,(i=1) -> <_> A ] A))

retIsContr (A B : U) (f : A -> B) (g : B -> A)
           (h : (x : A) -> Path A (g (f x)) x) (v : isContr B) : isContr A = (g b,p)
  where
  b : B = v.1
  q : (y:B) -> Path B y b = v.2
  p (x: A ) : Path A x (g b) =
    <i> hcom 0->1 A [(i=1) -> <_> g b, (i=0) -> h x] (g (q (f x) @ i))

f1 (A : U) (p : (B : U) * equiv A B) : ((B : U) * Path U A B) = (p.1,ua A p.1 p.2)
f2 (A : U) (p : (B : U) * Path U A B) : ((B : U) * equiv A B) = (p.1,pathToEquiv A p.1 p.2)

opaque uaret

uaretsig (A : U) : retract ((B : U) * equiv A B) ((B : U) * Path U A B) (f1 A) (f2 A) =
  \(p : (B : U) * equiv A B) -> <i> (p.1,uaret A p.1 p.2 @ i)

-- transparent uaret

-- normal form works with uaret opaque
univalence (A : U) : isContr ((B : U) * equiv A B) =
  retIsContr ((B : U) * equiv A B) ((B : U) * Path U A B)
     (f1 A) (f2 A) (uaretsig A) (isContrPath A)


-- Alternative proof of univalence. We prove that Vproj is an
-- equivalence and from this we directly get univalence. This is very
-- similar to the proof of univalence using that unglue is an
-- equivalence in CCHM (Corollary 10).
-- Compare with: https://github.com/mortberg/cubicaltt/blob/master/examples/univalence.ctt#L83

-- First define identity equivalence using or connection
-- TODO: can we do the proof below with the other definition of the id equivalence?
idEquivConnOr (B : U) : equiv B B =
  (idfun B
  ,\(b : B) -> ((b,<_> b)
               ,\(v : fiber B B (idfun B) b) ->
                  <i> (v.2 @ i,<j> connOr B v.1 b v.2 @ i @ j)))

-- Direct proof of univalence using the fact that Vproj is an equivalence
-- univalence (A : U) : isContr ((B : U) * equiv A B) =

-- isContr' (A : U) : U = (x : A) * ((y : A) -> Path A x y)

-- univalenceAlt (A : U) : isContr' ((B : U) * equiv A B) =
--   ((A,idEquivConnOr A)
--   ,\(w : (B : U) * equiv A B) ->
--    let goal : Path ((B : U) * equiv A B) (A,idEquivConnOr A) w = undefined
--        goal' : Path ((B : U) * equiv A B) (A,idEquivConnOr A) w =
--          <i> let B : U = w.1
--                  VB : U = V i A B w.2
--                  projB (g : VB) : B = Vproj i g A B w.2
--                  projBisEquiv : isEquiv VB B projB =
--                    \(b : B) -> let ctr : fiber VB B projB b =
--                                      (Vin i (w.2.2 b).1.1
--                                             (hcom 1->0 B [(i=0) -> (w.2.2 b).1.2, (i=1) -> <_> b] b)
--                                      ,<j> hcom 1->j B [(i=0) -> (w.2.2 b).1.2,(i=1) -> <_> b] b)
--                                    contr (v : fiber VB B projB b) : Path (fiber VB B projB b) v ctr =
--                                      <j> (Vin i ((w.2.2 b).2 v @ j).1
--                                                 (hcom 1->0 B [(i=0) -> ((w.2.2 b).2 v @ j).2
--                                                              ,(i=1) -> <k> connOr B v.1 b v.2 @ j @ k
--                                                              ,(j=0) -> v.2
--                                                              ,(j=1) -> <k> hcom 1->k B [(i=0) -> (w.2.2 b).1.2, (i=1) -> <_> b] b] b)
--                                          ,<l> hcom 1->l B [(i=0) -> ((w.2.2 b).2 v @ j).2
--                                                           ,(i=1) -> <k> connOr B v.1 b v.2 @ j @ k
--                                                           ,(j=0) -> v.2
--                                                           ,(j=1) -> <k> hcom 1->k B [(i=0) -> (w.2.2 b).1.2, (i=1) -> <_> b] b] b)
--                                in (ctr,contr)
--              in (VB,projB,projBisEquiv)
--    in goal)


univalenceAlt (B : U) : isContr ((A : U) * equiv A B) =
 ((B,idEquivConnOr B)
 ,\(w : (A : U) * equiv A B) ->
   let goal : Path ((A : U) * equiv A B) w (B,idEquivConnOr B) =
         <i> let VB : U = V i w.1 B w.2
                 projB (g : VB) : B = Vproj i g w.1 B w.2
                 projBisEquiv : isEquiv VB B projB =
                   \(b : B) -> let ctrB : Line B =
                                     <j> hcom 1->j B [(i=0) -> (w.2.2 b).1.2, (i=1) -> <_> b] b
                                   ctr : fiber VB B projB b =
                                     (Vin i (w.2.2 b).1.1 (ctrB @ 0), <j> ctrB @ j)
                                   contr (v : fiber VB B projB b) : Path (fiber VB B projB b) v ctr =
                                     <j> let filler : Line B =
                                               <l> hcom 1->l B [(i=0) -> ((w.2.2 b).2 v @ j).2
                                                               ,(i=1) -> <k> connOr B v.1 b v.2 @ j @ k
                                                               ,(j=0) -> v.2
                                                               ,(j=1) -> ctrB] b
                                         in (Vin i ((w.2.2 b).2 v @ j).1 (filler @ 0),<l> filler @ l)
                               in (ctr,contr)
             in (VB,projB,projBisEquiv)
   in goal)


-- Attempt to switch to equivInhProp
-- univalenceAlt (B : U) : isContr ((X : U) * equivInhProp X B) =
--  ((B,idEquivInhProp B)
--  ,\(w : (X : U) * equivInhProp X B) ->
--    let goal : Path ((X : U) * equivInhProp X B) w (B,idEquivInhProp B) = undefined
--        foo : Path U U U =
--          <i> let VB : U = V i w.1 B w.2
--                  projB (g : VB) : B = Vproj i g w.1 B w.2
--                  projBisEquiv : isEquivInhProp VB B projB =
--                    \(b : B) -> let ctr : fiber VB B projB b =
--                                      (Vin i (w.2.2 b).1.1
--                                             (hcom 1->0 B [(i=1) -> <_> b
--                                                          ,(i=0) -> (w.2.2 b).1.2] b)
--                                      ,<j> hcom 1->j B [(i=1) -> <_> b
--                                                       ,(i=0) -> (w.2.2 b).1.2] b)
--                                    contr (v1 v2 : fiber VB B projB b) : Path (fiber VB B projB b) v1 v2 = undefined
--                                      -- <j> (Vin i ((w.2.2 b).2 v (w.2.2 b).1 @ j).1
--                                      --            (hcom 1->0 B [(i=0) -> ((w.2.2 b).2 v (w.2.2 b).1 @ j).2
--                                      --                         ,(i=1) -> <k> connOr B v.1 b v.2 @ j @ k
--                                      --                         ,(j=0) -> v.2
--                                      --                         ,(j=1) -> <k> hcom 1->k B [(i=1) -> <_> b
--                                      --                                                   ,(i=0) -> (w.2.2 b).1.2] b] b)
--                                      --     ,<l> hcom 1->l B [(i=0) -> ((w.2.2 b).2 v (w.2.2 b).1 @ j).2
--                                      --                      ,(i=1) -> <k> connOr B v.1 b v.2 @ j @ k
--                                      --                      ,(j=0) -> v.2
--                                      --                      ,(j=1) -> <k> hcom 1->k B [(i=1) -> <_> b
--                                      --                                                ,(i=0) -> (w.2.2 b).1.2] b] b)
--                                in (ctr,contr)
--              in U
--    in goal)
